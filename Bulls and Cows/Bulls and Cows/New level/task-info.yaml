type: edu
files:
- name: src/bullscows/Main.java
  visible: true
  text: |
    package bullscows;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BullsCowsTest.java
  visible: false
  text: |-
    import bullscows.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class BullsCowsTest extends StageTest<String> {

        // base test with 1 digit number
        @DynamicTestingMethod
        CheckResult test1() {
            TestedProgram main = new TestedProgram();
            main.start();

            String output;
            int gotAnswer = 0;
            main.execute("1");
            main.execute("10");

            for (int i = 0; i <= 9; i++) {
                if (main.isFinished()) {
                    break; // if game has stopped, stop cycle and start check of results;
                }
                output = main.execute(Integer.toString(i));
                int[] result = getNumOfBullsAndCows(output);
                if (result[0] == 1) {
                    gotAnswer++; // if got a bull, count for an amount of answers
                }
            }

            // if we got less or more than 1 answer, the program work is incorrect
            if (gotAnswer != 1) {
                return CheckResult.wrong("The game has no answer or more than one. ");
            }

            return CheckResult.correct();
        }

        // standard bulls and cows game
        @DynamicTestingMethod
        CheckResult test2() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("4");
            String output = main.execute("10");
            secretCheck(output, 4, 10);

            Character[] usedSymbols = getUsedSymbols(main, 4);
            boolean check = getPermutations(main, 4, usedSymbols);

            if (!check && main.isFinished()) {
                return CheckResult.wrong("The program has finished before the answer was found");
            }

            if (!check) {
                return CheckResult.wrong("The program has finished before the answer was found. " +
                        "It means that your game was broken (we used length 4 and 10 symbols).");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The program didn't finish after " +
                        "the answer was found");
            }

            return CheckResult.correct();
        }

        // max length we can check
        @DynamicTestingMethod
        CheckResult test3() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("6");
            String output = main.execute("10");
            secretCheck(output, 6, 10);

            Character[] usedSymbols = getUsedSymbols(main, 6);
            boolean check = getPermutations(main, 6, usedSymbols);

            if (!check && main.isFinished()) {
                return CheckResult.wrong("The program has finished before the answer was found");
            }

            if (!check) {
                return CheckResult.wrong("The program has finished before the answer was found. " +
                        "It means that your game was broken (we used length 6 and 10 symbols).");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The program didn't finish after " +
                        "the answer was found");
            }

            return CheckResult.correct();
        }

        // this stage test
        @DynamicTestingMethod
        CheckResult test5() {
            TestedProgram main = new TestedProgram();
            main.start();
            main.execute("4");
            String output = main.execute("16");
            secretCheck(output, 4, 16);

            Character[] usedSymbols = getUsedSymbols(main, 4);
            boolean check = getPermutations(main, 4, usedSymbols);
            if (!check && main.isFinished()) {
                return CheckResult.wrong("The program has finished before the answer was found. " +
                        "It means that your game was broken (we used length 4 and 16 symbols).");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The program didn't finish after " +
                        "the answer was found");
            }

            return CheckResult.correct();
        }

        // test of usage of full dictionary
        @DynamicTestingMethod
        CheckResult test6() {
            TestedProgram main = new TestedProgram();
            main.start();

            main.execute("6");
            String output = main.execute("36");
            secretCheck(output, 6, 36);

            Character[] usedSymbols = getUsedSymbols(main, 6);
            boolean check = getPermutations(main, 6, usedSymbols);
            if (!check && main.isFinished()) {
                return CheckResult.wrong("The program has finished before the answer was found. " +
                        "It means that your game was broken (we used length 6 and 36 symbols).");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The program didn't finish after " +
                        "the answer was found");
            }

            return CheckResult.correct();
        }

        void secretCheck(String output, int length, int dictLen) {
            String secret = new String(new char[length]).replace('\0', '*');
            output = output.toLowerCase();

            if (!output.contains(secret)) {
                throw new WrongAnswer("The length of secret code is incorrect.");
            }

            String firstChar = "0";
            String lastChar;
            if (dictLen <= 10) {
                lastChar = "" + ((char) (47 + dictLen));
            } else {
                lastChar = "" + ((char) (86 + dictLen));
            }

            if (!(output.contains(firstChar) && output.contains(lastChar))) {
                throw new WrongAnswer("The range of possible symbols " +
                        "in the secret code is incorrect. " +
                        "For the " + dictLen + " possible symbols " +
                        "the last symbol should be '" + lastChar + "'.");
            }
        }


        Character[] getUsedSymbols(TestedProgram main, int length) {
            Character[] symbols = new Character[length];
            char[] dictionary = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
                    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
                    'u', 'v', 'w', 'x', 'y', 'z'};
            int[] result;

            int index = 0;
            String input;
            String output;

            for (char c : dictionary) {
                input = new String(new char[length]).replace('\0', c);
                output = main.execute(input);
                result = getNumOfBullsAndCows(output);

                if (result[0] > 1) {
                    throw new WrongAnswer("Seems like " +
                            "the calculation of bulls isn't right. " +
                            "For the guess \"" + input + "\" there can be 1 bull at max.");
                }

                if (result[0] == 1) {
                    symbols[index++] = c;
                }
                if (index == length) {
                    break;
                }
            }

            if (index != length) {
                throw new WrongAnswer(
                        "Output should contain " + length + " bulls " +
                        "summarized as every option was tried. Found: " + index
                );
            }

            return symbols;
        }


        // permutations one by one
        public boolean getPermutations(TestedProgram main, int length, Character[] elements) {
            int[] indexes = new int[length];
            for (int i = 0; i < length; i++) {
                indexes[i] = 0;
            }

            String output = main.execute(Arrays.toString(elements).replaceAll("\\[|\\]|, ", ""));
            int[] result = getNumOfBullsAndCows(output);
            if (result[0] == length) {
                return true;
            }

            int i = 0;
            while (i < length) {
                if (indexes[i] < i) {
                    swap(elements, i % 2 == 0 ? 0 : indexes[i], i);
                    output = main.execute(Arrays.toString(elements).replaceAll("\\[|\\]|, ", ""));
                    result = getNumOfBullsAndCows(output);
                    if (result[0] == length) {
                        return true;
                    }
                    indexes[i]++;
                    i = 0;
                } else {
                    indexes[i] = 0;
                    i++;
                }
            }
            return false;
        }

        // get number of bulls and cows from user program's output
        int[] getNumOfBullsAndCows(String userString) {
            Matcher nonePattern = Pattern.compile("\\b[nN]one\\b").matcher(userString);
            Matcher cowsPattern = Pattern.compile("\\b\\d [cC]ow").matcher(userString);
            Matcher bullsPattern = Pattern.compile("\\b\\d [bB]ull").matcher(userString);
            Pattern oneNumPattern = Pattern.compile("\\d");

            if (nonePattern.find()) {
                return new int[]{0, 0};
            }

            int[] ans = {0, 0};
            boolean found = false;

            if (bullsPattern.find()) {
                String temp = bullsPattern.group();
                Matcher oneNumBulls = oneNumPattern.matcher(temp);
                oneNumBulls.find();
                ans[0] = Integer.parseInt(oneNumBulls.group());
                found = true;
            }

            if (cowsPattern.find()) {
                String temp = cowsPattern.group();
                Matcher oneNumCows = oneNumPattern.matcher(temp);
                oneNumCows.find();
                ans[1] = Integer.parseInt(oneNumCows.group());
                found = true;
            }

            if (!found) {
                throw new WrongAnswer(
                        "Cannot find number of bulls or number of cows or None after the input."
                );
            }

            return ans;
        }

        private static void swap(Character[] input, int a, int b) {
            char tmp = input[a];
            input[a] = input[b];
            input[b] = tmp;
        }
    }
  learner_created: false
- name: src/bullscows/Game.java
  visible: true
  text: |
    package bullscows;

    import java.util.Scanner;

    public class Game {

        int turn = 1;
        boolean guessed = false;

        int[] numbers = {1234, 9876};
        String[] grades = {"None.", "4 bulls."};

        Generator gen = new Generator();
        Grader grader = new Grader(2);

        public Game() {
            // print first information
            begin();
            // generating secret code
            gen.gen();
            System.out.println(gen.getCode());
            // checking secretCode
            if (gen.getCode() == 0){
                return;
            }
            // game starting info
            next();
            // runing grade
            grader.graderStart(Integer.toString(gen.getCode()).toCharArray());

        }

        public void begin() {
            System.out.println("Please, enter the secret code's length:");
        }

        public void next() {
            System.out.println("Okay, let's start a game!");
        }

    }
  learner_created: true
- name: src/bullscows/Grader.java
  visible: true
  text: |
    package bullscows;

    import java.util.Scanner;

    public class Grader {

        private int cow = 0;
        private int bull = 0;
        boolean stillGuessing = true;

        public int getCode() {
            return code;
        }

        private int code;

        public Grader(int code) {
            this.code = code;
        }

        void graderStart(char[] code) {
            while (stillGuessing){
                Scanner in = new Scanner(System.in);
                String s = in.nextLine();
                char[] input = s.toCharArray();

                for (int i = 0; i < code.length; i++) {
                    if (input[i] == code[i]) {
                        bull++;
                    }
                }

                for (int i = 0; i < input.length; i++) {
                    for (int j = 0; j < code.length; j++) {
                        if (i != j) {
                            if (input[i] == code[j]) {
                                cow++;
                            }
                        }
                    }
                }
                printInfo(cow, bull, code);
                if (bull == code.length){
                    System.out.println("Congratulations! You guessed the secret code.");
                    stillGuessing = false;
                }
                bull = 0;
                cow = 0;
            }

        }

        private void printInfo(int cow, int bull, char[] code) {
            if (cow == 0 && bull == 0){
                System.out.println("Grade: None.");
            } else if (cow > 0 && bull == 0){
                System.out.println("Grade: " + cow + " cow.");
            } else if(cow == 0 && bull > 0){
                System.out.println("Grade: " + bull + " bull.");
            } else if (bull == code.length){
                System.out.println("Congratulations! You guessed the secret code.");
                stillGuessing = false;
            }else{
                System.out.println("Grade: " + bull + " bull(s) and " + cow + " cow(s).");
            }
        }


    }
  learner_created: true
- name: src/bullscows/Generator.java
  visible: true
  text: |
    package bullscows;

    import java.util.Scanner;

    public class Generator {

        public int getCode() {
            return code;
        }

        private static int code;

        public void gen() {

            Scanner scanner = new Scanner(System.in);
            int in = scanner.nextInt();

            if (in > 10) {
                System.out.println("Error: can't generate a secret number with a length of " + in + " because there aren't enough unique digits.");
                return;
            }

            long pseudoRandomNumber = System.nanoTime();
            String pseudoNum = String.valueOf(pseudoRandomNumber);
            StringBuilder sb = new StringBuilder();
            int i = 0;

            if (pseudoNum.startsWith("0")) {
                pseudoNum = pseudoNum.substring(1);
            }

            while (sb.length() != in) {

                String s = String.valueOf(pseudoNum.charAt(i));

                if (pseudoNum.length() - 1 == i) {
                    pseudoNum = String.valueOf(System.nanoTime());
                    i = 0;
                } else {
                    i++;
                }

                if (!sb.toString().contains(s)) {
                    sb.append(s);
                }
            }

            code = Integer.parseInt(sb.toString());
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/53/stages/292/implement#comment
status: Unchecked
record: -1
